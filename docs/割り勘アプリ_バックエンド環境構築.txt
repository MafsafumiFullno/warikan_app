# Docker + Laravel 開発環境セットアップ完全マニュアル

## 概要

このマニュアルは、Ubuntu環境上でDockerを利用してLaravelとPostgreSQLの開発環境を構築する手順をまとめたものです。

---

## 1. 構成概要

```
warikan_app/
├── backend/             (Laravelアプリケーション)
├── docker-compose.yml   (Docker構成ファイル)
└── その他
```

### コンテナ構成

* **app**: PHP (Laravel 実行環境)
* **db**: PostgreSQL (データベース)

---

## 2. 必要ツールのインストール（Ubuntu）

```bash
sudo apt update
sudo apt install docker.io docker-compose git -y
sudo usermod -aG docker $USER
newgrp docker
```

---

## 3. プロジェクトディレクトリ作成

```bash
mkdir warikan_app
cd warikan_app
mkdir backend
```

---

## 4. docker-compose.yml 作成

```yaml
services:
  app:
    build:
      context: ./backend
    container_name: warikan_backend
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/var/www
    depends_on:
      - db

  db:
    image: postgres:15
    container_name: warikan_db
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: warikan
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password

volumes:
  pgdata:
```

---

## 5. backend/Dockerfile 作成

```dockerfile
FROM php:8.3-fpm

RUN apt-get update && apt-get install -y --no-install-recommends \
    unzip \
    git \
    vim \
    libpq-dev \
    && docker-php-ext-install pdo pdo_pgsql \
    && rm -rf /var/lib/apt/lists/*

COPY --from=composer:latest /usr/bin/composer /usr/bin/composer

WORKDIR /var/www
```

---

## 6. Dockerビルドと起動

```bash
docker compose up -d --build
```

---

## 7. Laravelプロジェクト作成

```bash
docker compose exec app bash
composer create-project laravel/laravel .
cp .env.example .env
php artisan key:generate
```

---

## 8. .envのDB設定

```env
DB_CONNECTION=pgsql
DB_HOST=db
DB_PORT=5432
DB_DATABASE=warikan
DB_USERNAME=user
DB_PASSWORD=password
```

```bash
php artisan config:clear
php artisan migrate
```

---

## 9. Laravelサーバー起動とアクセス確認

```bash
php artisan serve --host=0.0.0.0
```

ブラウザから以下にアクセス

```
http://localhost:8000
```

Laravel初期画面が表示されれば成功。

---

## 10. コンテナ操作コマンド（基本）

### コンテナに入る

```bash
docker compose exec app bash
```

### コンテナから出る

```bash
exit
```

### コンテナを停止する

```bash
docker compose stop
```

### コンテナを再開する

```bash
docker compose start
```

### コンテナを停止＆削除する（ボリュームは残る）

```bash
docker compose down
```

### コンテナをビルドし直して起動する（Dockerfile変更後など）

```bash
docker compose up -d --build
```

---

## まとめ

この手順を完了すると、Docker上にLaravel + PostgreSQL環境が構築され、ホストマシンから[http://localhost:8000](http://localhost:8000) でLaravelアプリケーションを表示できる状態になります。

今後はこの環境上でAPI開発やフロントエンド連携などを進めることができます。
